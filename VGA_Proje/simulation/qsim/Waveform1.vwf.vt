// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/10/2021 20:25:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Disp_VGA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Disp_VGA_vlg_sample_tst(
	button1,
	button2,
	button3,
	clk_50M,
	sampler_tx
);
input  button1;
input  button2;
input  button3;
input  clk_50M;
output sampler_tx;

reg sample;
time current_time;
always @(button1 or button2 or button3 or clk_50M)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Disp_VGA_vlg_check_tst (
	Blue,
	Green,
	Red,
	h_sync,
	v_sync,
	sampler_rx
);
input  Blue;
input  Green;
input  Red;
input  h_sync;
input  v_sync;
input sampler_rx;

reg  Blue_expected;
reg  Green_expected;
reg  Red_expected;
reg  h_sync_expected;
reg  v_sync_expected;

reg  Blue_prev;
reg  Green_prev;
reg  Red_prev;
reg  h_sync_prev;
reg  v_sync_prev;

reg  Blue_expected_prev;
reg  Green_expected_prev;
reg  Red_expected_prev;
reg  h_sync_expected_prev;
reg  v_sync_expected_prev;

reg  last_Blue_exp;
reg  last_Green_exp;
reg  last_Red_exp;
reg  last_h_sync_exp;
reg  last_v_sync_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Blue_prev = Blue;
	Green_prev = Green;
	Red_prev = Red;
	h_sync_prev = h_sync;
	v_sync_prev = v_sync;
end

// update expected /o prevs

always @(trigger)
begin
	Blue_expected_prev = Blue_expected;
	Green_expected_prev = Green_expected;
	Red_expected_prev = Red_expected;
	h_sync_expected_prev = h_sync_expected;
	v_sync_expected_prev = v_sync_expected;
end



// expected Blue
initial
begin
	Blue_expected = 1'bX;
end 

// expected Green
initial
begin
	Green_expected = 1'bX;
end 

// expected Red
initial
begin
	Red_expected = 1'bX;
end 

// expected h_sync
initial
begin
	h_sync_expected = 1'bX;
end 

// expected v_sync
initial
begin
	v_sync_expected = 1'bX;
end 
// generate trigger
always @(Blue_expected or Blue or Green_expected or Green or Red_expected or Red or h_sync_expected or h_sync or v_sync_expected or v_sync)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Blue = %b | expected Green = %b | expected Red = %b | expected h_sync = %b | expected v_sync = %b | ",Blue_expected_prev,Green_expected_prev,Red_expected_prev,h_sync_expected_prev,v_sync_expected_prev);
	$display("| real Blue = %b | real Green = %b | real Red = %b | real h_sync = %b | real v_sync = %b | ",Blue_prev,Green_prev,Red_prev,h_sync_prev,v_sync_prev);
`endif
	if (
		( Blue_expected_prev !== 1'bx ) && ( Blue_prev !== Blue_expected_prev )
		&& ((Blue_expected_prev !== last_Blue_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Blue :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Blue_expected_prev);
		$display ("     Real value = %b", Blue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Blue_exp = Blue_expected_prev;
	end
	if (
		( Green_expected_prev !== 1'bx ) && ( Green_prev !== Green_expected_prev )
		&& ((Green_expected_prev !== last_Green_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Green :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Green_expected_prev);
		$display ("     Real value = %b", Green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Green_exp = Green_expected_prev;
	end
	if (
		( Red_expected_prev !== 1'bx ) && ( Red_prev !== Red_expected_prev )
		&& ((Red_expected_prev !== last_Red_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Red :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Red_expected_prev);
		$display ("     Real value = %b", Red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Red_exp = Red_expected_prev;
	end
	if (
		( h_sync_expected_prev !== 1'bx ) && ( h_sync_prev !== h_sync_expected_prev )
		&& ((h_sync_expected_prev !== last_h_sync_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h_sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h_sync_expected_prev);
		$display ("     Real value = %b", h_sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_h_sync_exp = h_sync_expected_prev;
	end
	if (
		( v_sync_expected_prev !== 1'bx ) && ( v_sync_prev !== v_sync_expected_prev )
		&& ((v_sync_expected_prev !== last_v_sync_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v_sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v_sync_expected_prev);
		$display ("     Real value = %b", v_sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_v_sync_exp = v_sync_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Disp_VGA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button1;
reg button2;
reg button3;
reg clk_50M;
// wires                                               
wire Blue;
wire Green;
wire Red;
wire h_sync;
wire v_sync;

wire sampler;                             

// assign statements (if any)                          
Disp_VGA i1 (
// port map - connection between master ports and signals/registers   
	.Blue(Blue),
	.Green(Green),
	.Red(Red),
	.button1(button1),
	.button2(button2),
	.button3(button3),
	.clk_50M(clk_50M),
	.h_sync(h_sync),
	.v_sync(v_sync)
);

// button1
initial
begin
	button1 = 1'b0;
end 

// button2
initial
begin
	button2 = 1'b0;
end 

// button3
initial
begin
	button3 = 1'b0;
end 

// clk_50M
always
begin
	clk_50M = 1'b0;
	clk_50M = #10000 1'b1;
	#10000;
end 

Disp_VGA_vlg_sample_tst tb_sample (
	.button1(button1),
	.button2(button2),
	.button3(button3),
	.clk_50M(clk_50M),
	.sampler_tx(sampler)
);

Disp_VGA_vlg_check_tst tb_out(
	.Blue(Blue),
	.Green(Green),
	.Red(Red),
	.h_sync(h_sync),
	.v_sync(v_sync),
	.sampler_rx(sampler)
);
endmodule

